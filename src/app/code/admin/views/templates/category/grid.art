<% $data.meta = {
  styleSheet: 'styles',
  title: 'View Categories',
  active: 'category-list',
  name: 'All Categories',
  breadCrumbs: [
    {
      name: 'Admin',
    },
    {
      name: 'Categories',
      url: '/admin/category'
    }
  ],
  actions: [
    {
      name: 'Flush Cache',
      url: '/admin/cache/flush/categories/categories',
      method: 'post'
    },
    {
      name: 'Add New Category',
      url: '/admin/category/new',
      class: 'accent'
    }
  ]
}
%>
<% extend('templates/pages/admin/layouts/sidebar-and-page/layout') %>

{{#block 'content'}}
  <form class="content" data-action="/admin/category" method="post"
    onsubmit="window.faux.formTools.sendFormAjax(event, this)">
    <div class="main">
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th class="min">Enabled</th>
            <th class="min">Posts</th>
            <th class="fixed">Actions</th>
          </tr>
        </thead>
        <tbody>
          {{#each $data.categoryList category}}
            <tr>
              <td><a class="inherit" href="/admin/category/{{category.human_id}}"
                  title="{{category.name}}">{{category.name}}</a>
              </td>
              <td class="min">{{category.enabled}}</td>
              <td class="min">{{category.post_count}}</td>
              <td class="fixed">
                <a href="/admin/category/{{category.human_id}}">Edit</a>
                <a href="/category/{{category.slug}}" target="_blank" rel="noreferrer noopener">Visit</a>
              </td>
            </tr>
          {{/each}}
        </tbody>
      </table>
      {{#if $data.categoryList.length === 0}}
        <div class="none">Unable to find categories</div>
      {{/if}}

      <div class="actions">
        <!-- 
          // TODO: Have this go through our other filter work - update or delete param vs resetting URL params on navigation
          // Reference the code below for how to do this
        -->
        showing {{($data.pagination.start) + 1}}-{{$data.pagination.end}} categories of {{$data.pagination.total}} total
        {{#if (($data.pagination.page) - 1) >= 0}}
          <button type="button" class="prev" data-page="{{(($data.pagination.page) - 1)}}">Previous</button>
        {{/if}}
        {{#if $data.pagination.total > $data.pagination.end}}
          <button type="button" class="next" data-page="{{(($data.pagination.page) + 1)}}">Next</button>
        {{/if}}
      </div>
    </div>
    <div class="widgets">
      <div class="widget">
        <div class="title">Sort By</div>
        <div class="subtitle">How to sort the grid</div>
        <select required autocomplete="off" name="sort-by">
          <option value="default" {{if $data.filters.sort == 'default'}} selected {{/if}}>Default</option>
          <option value="impressions" {{if $data.filters.sort == 'posts'}} selected {{/if}}>Posts</option>
          <option value="title" {{if $data.filters.sort == 'name'}} selected {{/if}}>Name</option>
          <option value="enabled" {{if $data.filters.sort == 'enabled'}} selected {{/if}}>Enabled</option>
        </select>
      </div>
      <div class="widget">
        <div class="title">Name Filter</div>
        <div class="subtitle">Filter by Name</div>
        <input type="text" placeholder="Name" autocomplete="off" name="name-filter" value="{{$data.filters.name}}">
      </div>
    </div>
  </form>
  <script>
    const nameFilter = document.querySelector('input[name="name-filter"]')
    const sortBy = document.querySelector('select[name="sort-by"]')
    const form = document.querySelector('form')
    const nextButton = document.querySelector('.actions .next')
    const previousButton = document.querySelector('.actions .prev')

    // Originally inspired by  David Walsh (https://davidwalsh.name/javascript-debounce-function)

    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // `wait` milliseconds.
    const debounce = (func, wait) => {
      let timeout;

      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };

        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    };

    const returnFunction = debounce(() => {
      UpdateUrlParam('title', nameFilter.value)
    }, 500)

    nameFilter.addEventListener('input', returnFunction)

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        UpdateUrlParam('page', nextButton.dataset.page)
      })
    }

    if (previousButton) {
      previousButton.addEventListener('click', () => {
        UpdateUrlParam('page', previousButton.dataset.page)
      })
    }

    sortBy.addEventListener('change', () => {
      UpdateUrlParam('sort', sortBy.value)
    })

    function UpdateUrlParam(name, value) {
      if ('URLSearchParams' in window) {
        var searchParams = new URLSearchParams(window.location.search)
        if (value === '') {
          searchParams.delete(name)
        } else {
          searchParams.set(name, value)
        }
        var newRelativePathQuery = window.location.pathname + '?' + searchParams.toString()
        history.pushState(null, '', newRelativePathQuery)
        window.tooling.fetchAndReplace(window.location, true)
      }
    }
  </script>
{{/block}}
